#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e

echo ""

info () {
  printf "$1\n"
}

user () {
  printf "‚ùî  $1 "
}

success () {
  printf "‚úÖ  $1\n"
}

fail () {
  printf "‚ÄºÔ∏è   $1\n"
  echo ""
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.local.symlink ]
  then
    info "üéõ  Setting up gitconfig..."

    git_credential="osxkeychain"

    user "   - What is your github author name?"
    read -e git_authorname
    user "   - What is your github author email?"
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

    success 'gitconfig'
  fi
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "Removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "Moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "Skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "Linked $1 to $2"
  fi
}

install_dotfiles () {
  info "üìÑ  Installing dotfiles..."

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name "*.symlink" -not -path "*.git*")
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

echo ""
info "‚ö†Ô∏è   Before proceding, check:"
info '    - Your default shell is zsh (`echo $0`)'
info '    - ~/.localrc is present and populated (`touch ~/.localrc & open ~/.localrc`)'
info "    - You are signed in to the Mac App Store"
echo ""
user "Ready? (y/n)"
read -e ready
if [[ $ready =~ ^[Nn]$ ]]
then
  exit 0
fi

# Set computer name (as done via System Preferences ‚Üí Sharing)
# Define $COMPUTER_NAME in ~/.localrc
if [ -z ${COMPUTER_NAME+x} ]
then
  echo ""
  info "üíª  Setting computer names..."
  sudo scutil --set ComputerName "$COMPUTER_NAME"
  sudo scutil --set HostName "$COMPUTER_NAME"
  sudo scutil --set LocalHostName "$COMPUTER_NAME"
  sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "$COMPUTER_NAME"
  success "Computer names set."
fi

echo ""
setup_gitconfig

echo ""
install_dotfiles

echo ""
info "üì¶  Installing dependencies..."
if source bin/dot | while read -r data; do info "$data"; done
then
  success "Dependencies installed."
else
  fail "Error installing dependencies."
fi

echo ""
info "‚öôÔ∏è   Restoring third-party app preferences..."
if [[ $(which mackup) ]]
then
  mackup -n restore
  success "Preferences restored."
else
  fail "mackup not found; no third-party preferences restored."
fi

echo ""
info "üëç  All done!"
